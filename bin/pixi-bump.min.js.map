{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Bump.js","src"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiBump","min","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","Bump","rendererType","prototype","addCollisionProperties","sprite","undefined","gx","Object","defineProperty","get","getGlobalPosition","x","enumerable","configurable","gy","y","centerX","width","centerY","height","halfWidth","halfHeight","xAnchorOffset","anchor","yAnchorOffset","circular","radius","_bumpPropertiesAdded","hitTestPoint","point","shape","left","right","top","bottom","vx","vy","magnitude","hit","Math","sqrt","hitTestCircle","c1","c2","combinedRadii","circleCollision","bounce","overlap","dx","dy","s","bounceOffSurface","movingCircleCollision","xSide","ySide","p1A","p1B","p2A","p2B","mass","vxHalf","abs","vyHalf","lx","ly","dp1","dp2","dp3","dp4","multipleCircleCollision","arrayOfCircles","j","checkMultipleCollision","displayObject","rect1","displayObjects","rect2","rectangleCollision","hitTestRectangle","r1","r2","collision","combinedHalfWidths","combinedHalfHeights","overlapX","overlapY","hitTestCircleRectangle","region","c1x","c1y","r1x","r1y","hitTestCirclePoint","diameter","circleRectangleCollision","circlePointCollision","p1","p2","contain","container","extra","parent","Set","add","size","outsideBounds","bounds","_getCenter","dimension","axis","b","react","findCollisionType","aIsASprite","bIsASprite","circleVsCircle","circleVsRectangle","rectangleVsRectangle","bind","Array","tmpb","hitTest","hitDirections","displayObject2","hitTestDirections","directions","indexOf","hitTestLeft","hitTestRight","hitTestTop","hitTestBottom","assign","PIXI","extras"],"mappings":";;;;;;;CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,WAAAL,EAAAK,cAAAC,IAAAX,MAAA,WAAA,MAAA,YAAA,QAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAjB,GAAA,IAAAc,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAC,GAAA,kBAAAC,UAAAA,OAAA,KAAAnB,GAAAkB,EAAA,MAAAA,GAAAD,GAAA,EAAA,IAAAG,EAAA,MAAAA,GAAAH,GAAA,EAAA,IAAAI,GAAA,GAAAC,OAAA,uBAAAL,EAAA,IAAA,MAAAI,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,MAAAI,GAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAF,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,GAAA,MAAAJ,OAAAe,GAAA,SAAAR,EAAAjB,EAAAD,GCQA,QAAA2B,KACAnB,KAAAoB,aAAA,OAGAD,EAAAE,UAAA,GAAAF,GAQAA,EAAAE,UAAAC,uBAAA,SAAAC,GAEA,SAAAvB,KAAAoB,mBAEAI,KAAAD,EAAAE,IACAC,OAAAC,eAAAJ,EAAA,MACAK,IAAA,WACA,MAAAL,GAAAM,oBAAAC,GAEAC,YAAA,EACAC,cAAA,QAKAR,KAAAD,EAAAU,IACAP,OAAAC,eAAAJ,EAAA,MACAK,IAAA,WACA,MAAAL,GAAAM,oBAAAK,GAEAH,YAAA,EACAC,cAAA,QAKAR,KAAAD,EAAAY,SACAT,OAAAC,eAAAJ,EAAA,WACAK,IAAA,WACA,MAAAL,GAAAO,EAAAP,EAAAa,MAAA,GAEAL,YAAA,EACAC,cAAA,QAKAR,KAAAD,EAAAc,SACAX,OAAAC,eAAAJ,EAAA,WACAK,IAAA,WACA,MAAAL,GAAAW,EAAAX,EAAAe,OAAA,GAEAP,YAAA,EACAC,cAAA,QAKAR,KAAAD,EAAAgB,WACAb,OAAAC,eAAAJ,EAAA,aACAK,IAAA,WACA,MAAAL,GAAAa,MAAA,GAEAL,YAAA,EACAC,cAAA,QAKAR,KAAAD,EAAAiB,YACAd,OAAAC,eAAAJ,EAAA,cACAK,IAAA,WACA,MAAAL,GAAAe,OAAA,GAEAP,YAAA,EACAC,cAAA,QAKAR,KAAAD,EAAAkB,eACAf,OAAAC,eAAAJ,EAAA,iBACAK,IAAA,WACA,WAAAJ,KAAAD,EAAAmB,OACAnB,EAAAa,MAAAb,EAAAmB,OAAAZ,EAEA,GAGAC,YAAA,EACAC,cAAA,QAKAR,KAAAD,EAAAoB,eACAjB,OAAAC,eAAAJ,EAAA,iBACAK,IAAA,WACA,WAAAJ,KAAAD,EAAAmB,OACAnB,EAAAe,OAAAf,EAAAmB,OAAAR,EAEA,GAGAH,YAAA,EACAC,cAAA,IAIAT,EAAAqB,cAAApB,KAAAD,EAAAsB,QACAnB,OAAAC,eAAAJ,EAAA,UACAK,IAAA,WACA,MAAAL,GAAAa,MAAA,GAEAL,YAAA,EACAC,cAAA,KAyDAT,EAAAuB,sBAAA,GAcA3B,EAAAE,UAAA0B,aAAA,SAAAC,EAAAzB,GAEAA,EAAAuB,sBAAA9C,KAAAsB,uBAAAC,EAEA,IAAA0B,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAoCA,OA/BAR,GADA1B,EAAAsB,OACA,SAEA,YAIA,cAAAI,IAEAC,EAAA3B,EAAAO,EAAAP,EAAAkB,cACAU,EAAA5B,EAAAO,EAAAP,EAAAa,MAAAb,EAAAkB,cACAW,EAAA7B,EAAAW,EAAAX,EAAAoB,cACAU,EAAA9B,EAAAW,EAAAX,EAAAe,OAAAf,EAAAoB,cAGAc,EAAAT,EAAAlB,EAAAoB,GAAAF,EAAAlB,EAAAqB,GAAAH,EAAAd,EAAAkB,GAAAJ,EAAAd,EAAAmB,GAIA,WAAAJ,IAGAK,EAAAN,EAAAlB,EAAAP,EAAAO,EAAAP,EAAAa,MAAA,EAAAb,EAAAkB,cACAc,EAAAP,EAAAd,EAAAX,EAAAW,EAAAX,EAAAe,OAAA,EAAAf,EAAAoB,cACAa,EAAAE,KAAAC,KAAAL,EAAAA,EAAAC,EAAAA,GAIAE,EAAAD,EAAAjC,EAAAsB,QAIAY,GAYAtC,EAAAE,UAAAuC,cAAA,SAAAC,EAAAC,EAAAhE,GAEA+D,EAAAf,sBAAA9C,KAAAsB,uBAAAuC,GACAC,EAAAhB,sBAAA9C,KAAAsB,uBAAAwC,EAEA,IAAAR,GAAAC,EAAAC,EAAAO,CAyBA,OAtBAjE,IAEAwD,EAAAQ,EAAArC,GAAAqC,EAAA1B,MAAA,EAAA0B,EAAArB,eAAAoB,EAAApC,GAAAoC,EAAAzB,MAAA,EAAAyB,EAAApB,eACAc,EAAAO,EAAA7B,GAAA6B,EAAA1B,MAAA,EAAA0B,EAAAnB,eAAAkB,EAAA5B,GAAA4B,EAAAzB,MAAA,EAAAyB,EAAAlB,iBAGAW,EAAAQ,EAAAhC,EAAAgC,EAAA1B,MAAA,EAAA0B,EAAArB,eAAAoB,EAAA/B,EAAA+B,EAAAzB,MAAA,EAAAyB,EAAApB,eACAc,EAAAO,EAAA5B,EAAA4B,EAAA1B,MAAA,EAAA0B,EAAAnB,eAAAkB,EAAA3B,EAAA2B,EAAAzB,MAAA,EAAAyB,EAAAlB,gBAKAa,EAAAE,KAAAC,KAAAL,EAAAA,EAAAC,EAAAA,GAGAQ,EAAAF,EAAAhB,OAAAiB,EAAAjB,OAIAW,EAAAO,GAoBA5C,EAAAE,UAAA2C,gBAAA,SAAAH,EAAAC,EAAAG,EAAAnE,GAEA+D,EAAAf,sBAAA9C,KAAAsB,uBAAAuC,GACAC,EAAAhB,sBAAA9C,KAAAsB,uBAAAwC,EAEA,IAAAN,GACAO,EACAG,EACAZ,EACAC,EACAY,EACAC,EACAC,KACAZ,GAAA,CAsBA,IAlBA3D,GAEAwD,EAAAQ,EAAArC,GAAAqC,EAAA1B,MAAA,EAAA0B,EAAArB,eAAAoB,EAAApC,GAAAoC,EAAAzB,MAAA,EAAAyB,EAAApB,eACAc,EAAAO,EAAA7B,GAAA6B,EAAA1B,MAAA,EAAA0B,EAAAnB,eAAAkB,EAAA5B,GAAA4B,EAAAzB,MAAA,EAAAyB,EAAAlB,iBAGAW,EAAAQ,EAAAhC,EAAAgC,EAAA1B,MAAA,EAAA0B,EAAArB,eAAAoB,EAAA/B,EAAA+B,EAAAzB,MAAA,EAAAyB,EAAApB,eACAc,EAAAO,EAAA5B,EAAA4B,EAAA1B,MAAA,EAAA0B,EAAAnB,eAAAkB,EAAA3B,EAAA2B,EAAAzB,MAAA,EAAAyB,EAAAlB,gBAKAa,EAAAE,KAAAC,KAAAL,EAAAA,EAAAC,EAAAA,GAGAQ,EAAAF,EAAAhB,OAAAiB,EAAAjB,OAGAW,EAAAO,EAAA,CAEAN,GAAA,EAGAS,EAAAH,EAAAP,CASAU,IADA,GAKAC,EAAAb,EAAAE,EACAY,EAAAb,EAAAC,EAKAK,EAAA/B,GAAAoC,EAAAC,EACAN,EAAA3B,GAAAgC,EAAAE,EAGAH,IAIAI,EAAAvC,EAAAyB,EACAc,EAAAnC,GAAAoB,EAGAtD,KAAAsE,iBAAAT,EAAAQ,IAGA,MAAAZ,IAcAtC,EAAAE,UAAAkD,sBAAA,SAAAV,EAAAC,EAAAhE,GAEA+D,EAAAf,sBAAA9C,KAAAsB,uBAAAuC,GACAC,EAAAhB,sBAAA9C,KAAAsB,uBAAAwC,EAEA,IAAAC,GACAG,EACAM,EACAC,EAEAJ,KACAK,KACAC,KACAC,KACAC,KACApB,GAAA,CAyBA,IAtBAI,EAAAiB,KAAAjB,EAAAiB,MAAA,EACAhB,EAAAgB,KAAAhB,EAAAgB,MAAA,EAGAhF,GAEAuE,EAAAf,GAAAQ,EAAArC,GAAAqC,EAAAjB,OAAAiB,EAAArB,eAAAoB,EAAApC,GAAAoC,EAAAhB,OAAAgB,EAAApB,eACA4B,EAAAd,GAAAO,EAAA7B,GAAA6B,EAAAjB,OAAAiB,EAAAnB,eAAAkB,EAAA5B,GAAA4B,EAAAhB,OAAAgB,EAAAlB,iBAGA0B,EAAAf,GAAAQ,EAAAhC,EAAAgC,EAAAjB,OAAAiB,EAAArB,eAAAoB,EAAA/B,EAAA+B,EAAAhB,OAAAgB,EAAApB,eACA4B,EAAAd,GAAAO,EAAA5B,EAAA4B,EAAAjB,OAAAiB,EAAAnB,eAAAkB,EAAA3B,EAAA2B,EAAAhB,OAAAgB,EAAAlB,gBAKA0B,EAAAb,UAAAE,KAAAC,KAAAU,EAAAf,GAAAe,EAAAf,GAAAe,EAAAd,GAAAc,EAAAd,IAGAQ,EAAAF,EAAAhB,OAAAiB,EAAAjB,OAGAwB,EAAAb,UAAAO,EAAA,CAEAN,GAAA,EAGAS,EAAAH,EAAAM,EAAAb,UAGAU,GAAA,GAIAG,EAAAF,GAAAE,EAAAf,GAAAe,EAAAb,UACAa,EAAAD,GAAAC,EAAAd,GAAAc,EAAAb,UAIAa,EAAAU,OAAArB,KAAAsB,IAAAX,EAAAF,GAAAD,EAAA,GACAG,EAAAY,OAAAvB,KAAAsB,IAAAX,EAAAD,GAAAF,EAAA,GAGAM,EAAAX,EAAA/B,EAAAgC,EAAAhC,EAAA,GAAA,EACA2C,EAAAZ,EAAA3B,EAAA4B,EAAA5B,EAAA,GAAA,EAKA2B,EAAA/B,EAAA+B,EAAA/B,EAAAuC,EAAAU,OAAAP,EACAX,EAAA3B,EAAA2B,EAAA3B,EAAAmC,EAAAY,OAAAR,EAGAX,EAAAhC,EAAAgC,EAAAhC,EAAAuC,EAAAU,QAAAP,EACAV,EAAA5B,EAAA4B,EAAA5B,EAAAmC,EAAAY,QAAAR,EAKAJ,EAAAa,GAAAb,EAAAd,GACAc,EAAAc,IAAAd,EAAAf,EAKA,IAAA8B,GAAAvB,EAAAP,GAAAe,EAAAF,GAAAN,EAAAN,GAAAc,EAAAD,EAGAM,GAAA5C,EAAAsD,EAAAf,EAAAF,GACAO,EAAAxC,EAAAkD,EAAAf,EAAAD,EAGA,IAAAiB,GAAAxB,EAAAP,IAAAe,EAAAa,GAAAb,EAAAb,WAAAK,EAAAN,IAAAc,EAAAc,GAAAd,EAAAb,UAGAmB,GAAA7C,EAAAuD,GAAAhB,EAAAa,GAAAb,EAAAb,WACAmB,EAAAzC,EAAAmD,GAAAhB,EAAAc,GAAAd,EAAAb,UAKA,IAAA8B,GAAAxB,EAAAR,GAAAe,EAAAF,GAAAL,EAAAP,GAAAc,EAAAD,EAGAQ,GAAA9C,EAAAwD,EAAAjB,EAAAF,GACAS,EAAA1C,EAAAoD,EAAAjB,EAAAD,EAGA,IAAAmB,GAAAzB,EAAAR,IAAAe,EAAAa,GAAAb,EAAAb,WAAAM,EAAAP,IAAAc,EAAAc,GAAAd,EAAAb,UAGAqB,GAAA/C,EAAAyD,GAAAlB,EAAAa,GAAAb,EAAAb,WACAqB,EAAA3C,EAAAqD,GAAAlB,EAAAc,GAAAd,EAAAb,WAMAK,EAAAI,UACAJ,EAAAI,OAAAnC,EAAA6C,EAAA7C,EAAA8C,EAAA9C,EACA+B,EAAAI,OAAA/B,EAAAyC,EAAAzC,EAAA0C,EAAA1C,EAIA4B,EAAAG,UACAH,EAAAG,OAAAnC,EAAA4C,EAAA5C,EAAA+C,EAAA/C,EACAgC,EAAAG,OAAA/B,EAAAwC,EAAAxC,EAAA2C,EAAA3C,EAIA2B,EAAAP,GAAAO,EAAAI,OAAAnC,EAAA+B,EAAAiB,KACAjB,EAAAN,GAAAM,EAAAI,OAAA/B,EAAA2B,EAAAiB,KACAhB,EAAAR,GAAAQ,EAAAG,OAAAnC,EAAAgC,EAAAgB,KACAhB,EAAAP,GAAAO,EAAAG,OAAA/B,EAAA4B,EAAAgB,KAEA,MAAArB,IAUAtC,EAAAE,UAAAmE,wBAAA,SAAAC,EAAA3F,GACA,IAAA,GAAAU,GAAA,EAAAA,EAAAiF,EAAAxE,OAAAT,IAGA,IAAA,GADAqD,GAAA4B,EAAAjF,GACAkF,EAAAlF,EAAA,EAAAkF,EAAAD,EAAAxE,OAAAyE,IAAA,CAEA,GAAA5B,GAAA2B,EAAAC,EAKA1F,MAAAuE,sBAAAV,EAAAC,EAAAhE,KAUAqB,EAAAE,UAAAsE,uBAAA,SAAAC,EAAA3B,EAAAnE,GACA,IAAA,GAAAU,GAAA,EAAAA,EAAAoF,EAAA3E,OAAAT,IAGA,IAAA,GAFAqF,GAAAC,eAAAtF,GAEAkF,EAAAlF,EAAA,EAAAkF,EAAAE,EAAA3E,OAAAyE,IAAA,CACA,GAAAK,GAAAH,EAAAF,EAEA,OAAAzB,GAGA+B,mBAAAH,EAAAE,EAAA9B,EAAAnE,GAFAmG,iBAAAJ,EAAAE,EAAAjG,KAoBAqB,EAAAE,UAAA2E,mBAAA,SAAAE,EAAAC,EAAAlC,EAAAnE,IACA,IAAAA,IAAAA,GAAA,GAEAoG,EAAApD,sBAAA9C,KAAAsB,uBAAA4E,GACAC,EAAArD,sBAAA9C,KAAAsB,uBAAA6E,EAEA,IAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAlD,EAAAC,CAiGA,OA9FAzD,IACAwD,EAAA4C,EAAAzE,GAAAiC,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,eAAA0D,EAAA1E,GAAAiC,KAAAsB,IAAAmB,EAAA5D,WAAA4D,EAAA1D,eACAc,EAAA2C,EAAAjE,GAAAyB,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,eAAAwD,EAAAlE,GAAAyB,KAAAsB,IAAAmB,EAAA3D,YAAA2D,EAAAxD,iBAIAW,EAAA4C,EAAApE,EAAA4B,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,eAAA0D,EAAArE,EAAA4B,KAAAsB,IAAAmB,EAAA5D,WAAA4D,EAAA1D,eACAc,EAAA2C,EAAAhE,EAAAwB,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,eAAAwD,EAAAjE,EAAAwB,KAAAsB,IAAAmB,EAAA3D,YAAA2D,EAAAxD,gBAIA0D,EAAA3C,KAAAsB,IAAAkB,EAAA3D,WAAAmB,KAAAsB,IAAAmB,EAAA5D,WACA+D,EAAA5C,KAAAsB,IAAAkB,EAAA1D,YAAAkB,KAAAsB,IAAAmB,EAAA3D,YAGAkB,KAAAsB,IAAA1B,GAAA+C,GAGA3C,KAAAsB,IAAAzB,GAAA+C,IAGAC,EAAAF,EAAA3C,KAAAsB,IAAA1B,GACAkD,EAAAF,EAAA5C,KAAAsB,IAAAzB,GAMAgD,GAAAC,GAIAjD,EAAA,GACA6C,EAAA,MAEAF,EAAAhE,EAAAgE,EAAAhE,EAAAsE,IAEAJ,EAAA,SAEAF,EAAAhE,EAAAgE,EAAAhE,EAAAsE,GAIAvC,IACAiC,EAAA3C,KAAA,KAgBAD,EAAA,GACA8C,EAAA,OAEAF,EAAApE,EAAAoE,EAAApE,EAAAyE,IAEAH,EAAA,QAEAF,EAAApE,EAAAoE,EAAApE,EAAAyE,GAIAtC,IACAiC,EAAA5C,KAAA,KAsBA8C,GAaAjF,EAAAE,UAAA4E,iBAAA,SAAAC,EAAAC,EAAArG,GAEAoG,EAAApD,sBAAA9C,KAAAsB,uBAAA4E,GACAC,EAAArD,sBAAA9C,KAAAsB,uBAAA6E,EAEA,IAAAE,GAAAC,EAAAhD,EAAAC,CAkCA,QA/BA,EAGAzD,GACAwD,EAAA4C,EAAAzE,GAAAiC,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,eAAA0D,EAAA1E,GAAAiC,KAAAsB,IAAAmB,EAAA5D,WAAA4D,EAAA1D,eACAc,EAAA2C,EAAAjE,GAAAyB,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,eAAAwD,EAAAlE,GAAAyB,KAAAsB,IAAAmB,EAAA3D,YAAA2D,EAAAxD,iBAEAW,EAAA4C,EAAApE,EAAA4B,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,eAAA0D,EAAArE,EAAA4B,KAAAsB,IAAAmB,EAAA5D,WAAA4D,EAAA1D,eACAc,EAAA2C,EAAAhE,EAAAwB,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,eAAAwD,EAAAjE,EAAAwB,KAAAsB,IAAAmB,EAAA3D,YAAA2D,EAAAxD,gBAIA0D,EAAA3C,KAAAsB,IAAAkB,EAAA3D,WAAAmB,KAAAsB,IAAAmB,EAAA5D,WACA+D,EAAA5C,KAAAsB,IAAAkB,EAAA1D,YAAAkB,KAAAsB,IAAAmB,EAAA3D,YAGAkB,KAAAsB,IAAA1B,GAAA+C,GAEA3C,KAAAsB,IAAAzB,GAAA+C,GA0BAnF,EAAAE,UAAAoF,uBAAA,SAAA5C,EAAAqC,EAAApG,GAEAoG,EAAApD,sBAAA9C,KAAAsB,uBAAA4E,GACArC,EAAAf,sBAAA9C,KAAAsB,uBAAAuC,EAEA,IAAA6C,GAAAN,EAAAO,EAAAC,EAAAC,EAAAC,CAkDA,IA/CAhH,GACA6G,EAAA9C,EAAApC,GACAmF,EAAA/C,EAAA5B,GACA4E,EAAAX,EAAAzE,GACAqF,EAAAZ,EAAAjE,KAEA0E,EAAA9C,EAAA/B,EACA8E,EAAA/C,EAAA3B,EACA2E,EAAAX,EAAApE,EACAgF,EAAAZ,EAAAhE,GAsCA,eA9BAwE,EAJAE,EAAA/C,EAAAlB,cAAAmE,EAAApD,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,cAGAgE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,UACAkE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,WAEA,YAEAmE,EAAA/C,EAAAlB,cAAAmE,EAAApD,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,cAKAgE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,aACAkE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,cAEA,eAKAkE,EAAA9C,EAAApB,cAAAoE,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,aAEA,gBAMA,iBAAAiE,GAAA,eAAAA,GAAA,gBAAAA,EAEAN,EAAApG,KAAAiG,iBAAApC,EAAAqC,EAAApG,OACA,CAGA,GAAAkD,KAEA,QAAA0D,GACA,IAAA,UACA1D,EAAAlB,EAAA+E,EAAAX,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAAvD,aACA,MAEA,KAAA,WACAK,EAAAlB,EAAA+E,EAAAX,EAAA9D,MAAA8D,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAAvD,aACA,MAEA,KAAA,aACAK,EAAAlB,EAAA+E,EAAAX,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAA5D,OAAA4D,EAAAvD,aACA,MAEA,KAAA,cACAK,EAAAlB,EAAA+E,EAAAX,EAAA9D,MAAA8D,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAA5D,OAAA4D,EAAAvD,cAIAyD,EAAApG,KAAA+G,mBAAAlD,EAAAb,EAAAlD,GAKA,MAAAsG,GACAM,EAEAN,GAcAjF,EAAAE,UAAA0F,mBAAA,SAAAlD,EAAAb,EAAAlD,GAkBA,MAhBA+D,GAAAf,sBAAA9C,KAAAsB,uBAAAuC,GAMAb,EAAAgE,SAAA,EACAhE,EAAAZ,MAAAY,EAAAgE,SACAhE,EAAAH,OAAA,GACAG,EAAAb,QAAAa,EAAAlB,EACAkB,EAAAX,QAAAW,EAAAd,EACAc,EAAAvB,GAAAuB,EAAAlB,EACAkB,EAAAf,GAAAe,EAAAd,EACAc,EAAAP,cAAA,EACAO,EAAAL,cAAA,EACAK,EAAAF,sBAAA,EACA9C,KAAA4D,cAAAC,EAAAb,EAAAlD,IAaAqB,EAAAE,UAAA4F,yBAAA,SAAApD,EAAAqC,EAAAjC,EAAAnE,GAEAoG,EAAApD,sBAAA9C,KAAAsB,uBAAA4E,GACArC,EAAAf,sBAAA9C,KAAAsB,uBAAAuC,EAEA,IAAA6C,GAAAN,EAAAO,EAAAC,EAAAC,EAAAC,CAkDA,IA/CAhH,GACA6G,EAAA9C,EAAApC,GACAmF,EAAA/C,EAAA5B,GACA4E,EAAAX,EAAAzE,GACAqF,EAAAZ,EAAAjE,KAEA0E,EAAA9C,EAAA/B,EACA8E,EAAA/C,EAAA3B,EACA2E,EAAAX,EAAApE,EACAgF,EAAAZ,EAAAhE,GAsCA,eA9BAwE,EAJAE,EAAA/C,EAAAlB,cAAAmE,EAAApD,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,cAGAgE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,UACAkE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,WAEA,YAEAmE,EAAA/C,EAAAlB,cAAAmE,EAAApD,KAAAsB,IAAAkB,EAAA1D,YAAA0D,EAAAvD,cAKAgE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,aACAkE,EAAA9C,EAAApB,cAAAoE,EAAA,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,cAEA,eAKAkE,EAAA9C,EAAApB,cAAAoE,EAAAnD,KAAAsB,IAAAkB,EAAA3D,WAAA2D,EAAAzD,cACA,aAEA,gBAMA,iBAAAiE,GAAA,eAAAA,GAAA,gBAAAA,EAEAN,EAAApG,KAAAgG,mBAAAnC,EAAAqC,EAAAjC,EAAAnE,OACA,CAGA,GAAAkD,KAEA,QAAA0D,GACA,IAAA,UACA1D,EAAAlB,EAAA+E,EAAAX,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAAvD,aACA,MAEA,KAAA,WACAK,EAAAlB,EAAA+E,EAAAX,EAAA9D,MAAA8D,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAAvD,aACA,MAEA,KAAA,aACAK,EAAAlB,EAAA+E,EAAAX,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAA5D,OAAA4D,EAAAvD,aACA,MAEA,KAAA,cACAK,EAAAlB,EAAA+E,EAAAX,EAAA9D,MAAA8D,EAAAzD,cACAO,EAAAd,EAAA4E,EAAAZ,EAAA5D,OAAA4D,EAAAvD,cAIAyD,EAAApG,KAAAkH,qBAAArD,EAAAb,EAAAiB,EAAAnE,GAGA,MAAAsG,GACAM,EAEAN,GAeAjF,EAAAE,UAAA6F,qBAAA,SAAArD,EAAAb,EAAAiB,EAAAnE,GAkBA,MAhBA+D,GAAAf,sBAAA9C,KAAAsB,uBAAAuC,GAMAb,EAAAgE,SAAA,EACAhE,EAAAZ,MAAAY,EAAAgE,SACAhE,EAAAH,OAAA,GACAG,EAAAb,QAAAa,EAAAlB,EACAkB,EAAAX,QAAAW,EAAAd,EACAc,EAAAvB,GAAAuB,EAAAlB,EACAkB,EAAAf,GAAAe,EAAAd,EACAc,EAAAP,cAAA,EACAO,EAAAL,cAAA,EACAK,EAAAF,sBAAA,EACA9C,KAAAgE,gBAAAH,EAAAb,EAAAiB,EAAAnE,IAiBAqB,EAAAE,UAAAiD,iBAAA,SAAA/D,EAAA8D,GAEA9D,EAAAuC,sBAAA9C,KAAAsB,uBAAAf,EAEA,IAAA6E,GACAC,EACA8B,KACAC,KACAnD,KACAa,EAAAvE,EAAAuE,MAAA,CAIAT,GAAAa,GAAAb,EAAAnC,EACAmC,EAAAc,IAAAd,EAAAvC,EAGAuC,EAAAb,UAAAE,KAAAC,KAAAU,EAAAvC,EAAAuC,EAAAvC,EAAAuC,EAAAnC,EAAAmC,EAAAnC,GAGAmC,EAAAF,GAAAE,EAAAvC,EAAAuC,EAAAb,UACAa,EAAAD,GAAAC,EAAAnC,EAAAmC,EAAAb,UAKA4B,EAAA7E,EAAA+C,GAAAe,EAAAF,GAAA5D,EAAAgD,GAAAc,EAAAD,GAGA+C,EAAA7D,GAAA8B,EAAAf,EAAAF,GACAgD,EAAA5D,GAAA6B,EAAAf,EAAAD,GAGAiB,EAAA9E,EAAA+C,IAAAe,EAAAa,GAAAb,EAAAb,WAAAjD,EAAAgD,IAAAc,EAAAc,GAAAd,EAAAb,WAGA4D,EAAA9D,GAAA+B,GAAAhB,EAAAa,GAAAb,EAAAb,WACA4D,EAAA7D,GAAA8B,GAAAhB,EAAAc,GAAAd,EAAAb,WAGA4D,EAAA9D,KAAA,EACA8D,EAAA7D,KAAA,EAGAU,EAAAnC,EAAAqF,EAAA7D,GAAA8D,EAAA9D,GACAW,EAAA/B,EAAAiF,EAAA5D,GAAA6D,EAAA7D,GAIAhD,EAAA+C,GAAAW,EAAAnC,EAAAgD,EACAvE,EAAAgD,GAAAU,EAAA/B,EAAA4C,GAuIA3D,EAAAE,UAAAgG,QAAA,SAAA9F,EAAA+F,EAAArD,EAAAsD,GACAA,IAAAA,MAAA/F,IAEAD,EAAAuB,sBAAA9C,KAAAsB,uBAAAC,OAIAC,KAAA8F,EAAA7E,gBAAA6E,EAAA7E,cAAA,OACAjB,KAAA8F,EAAA3E,gBAAA2E,EAAA3E,cAAA,OACAnB,KAAAD,EAAAiG,OAAA/F,KAAAF,EAAAiG,OAAA/F,GAAA,OACAD,KAAAD,EAAAiG,OAAAvF,KAAAV,EAAAiG,OAAAvF,GAAA,EAIA,IAAAmE,GAAA,GAAAqB,IAkDA,OA/CAlG,GAAAO,EAAAP,EAAAkB,cAAA6E,EAAAxF,EAAAP,EAAAiG,OAAA/F,GAAA6F,EAAA7E,gBAEAwB,IAAA1C,EAAA+B,KAAA,GAIA/B,EAAAuD,OAAAvD,EAAA+B,IAAA/B,EAAAuD,MAGAvD,EAAAO,EAAAwF,EAAAxF,EAAAP,EAAAiG,OAAA/F,GAAA6F,EAAA7E,cAAAlB,EAAAkB,cAGA2D,EAAAsB,IAAA,SAIAnG,EAAAW,EAAAX,EAAAoB,cAAA2E,EAAApF,EAAAX,EAAAiG,OAAAvF,GAAAqF,EAAA3E,gBACAsB,IAAA1C,EAAAgC,KAAA,GACAhC,EAAAuD,OAAAvD,EAAAgC,IAAAhC,EAAAuD,MACAvD,EAAAW,EAAAoF,EAAApF,EAAAX,EAAAiG,OAAAvF,GAAAqF,EAAA3E,cAAApB,EAAAoB,cACAyD,EAAAsB,IAAA,QAIAnG,EAAAO,EAAAP,EAAAkB,cAAAlB,EAAAa,MAAAkF,EAAAlF,MAAAkF,EAAA7E,gBACAwB,IAAA1C,EAAA+B,KAAA,GACA/B,EAAAuD,OAAAvD,EAAA+B,IAAA/B,EAAAuD,MACAvD,EAAAO,EAAAwF,EAAAlF,MAAAb,EAAAa,MAAAkF,EAAA7E,cAAAlB,EAAAkB,cACA2D,EAAAsB,IAAA,UAIAnG,EAAAW,EAAAX,EAAAoB,cAAApB,EAAAe,OAAAgF,EAAAhF,OAAAgF,EAAA3E,gBACAsB,IAAA1C,EAAAgC,KAAA,GACAhC,EAAAuD,OAAAvD,EAAAgC,IAAAhC,EAAAuD,MACAvD,EAAAW,EAAAoF,EAAAhF,OAAAf,EAAAe,OAAAgF,EAAA3E,cAAApB,EAAAoB,cACAyD,EAAAsB,IAAA,WAIA,IAAAtB,EAAAuB,OAAAvB,MAAA5E,IAIA4E,GAAAmB,GAAAA,EAAAnB,GAGAA,GAQAjF,EAAAE,UAAAuG,cAAA,SAAAvD,EAAAwD,EAAAN,GACA,GAAAzF,GAAA+F,EAAA/F,EACAI,EAAA2F,EAAA3F,EACAE,EAAAyF,EAAAzF,MACAE,EAAAuF,EAAAvF,OAIA8D,EAAA,GAAAqB,IA2BA,OAxBApD,GAAAvC,EAAAA,EAAAuC,EAAAjC,OACAgE,EAAAsB,IAAA,QAGArD,EAAAnC,EAAAA,EAAAmC,EAAA/B,QACA8D,EAAAsB,IAAA,OAGArD,EAAAvC,EAAAM,EAAAiC,EAAAjC,OACAgE,EAAAsB,IAAA,SAGArD,EAAAnC,EAAAI,EAAA+B,EAAA/B,QACA8D,EAAAsB,IAAA,UAIA,IAAAtB,EAAAuB,OAAAvB,MAAA5E,IAIA4E,GAAAmB,GAAAA,EAAAnB,GAGAA,GAYAjF,EAAAE,UAAAyG,WAAA,SAAAvH,EAAAwH,EAAAC,GACA,WAAAxG,KAAAjB,EAAAmC,OACA,IAAAnC,EAAAmC,OAAAsF,GACA,EAGAD,EAAA,EAGAA,GAIA5G,EAAAE,UAAAoC,IAAA,SAAA7C,EAAAqH,EAAAC,EAAAjE,EAAAnE,EAAAyH,GAgCA,QAAAY,GAAAvH,EAAAqH,GAIA,GAAAG,OAAA5G,KAAAZ,EAAA4G,OACAa,MAAA7G,KAAAyG,EAAAT,MAEA,IAAAY,GAAAC,EAEA,MAAAzH,GAAAoG,UAAAiB,EAAAjB,SAEAsB,EAAA1H,EAAAqH,GACArH,EAAAoG,WAAAiB,EAAAjB,SAEAuB,EAAA3H,EAAAqH,GAGAO,EAAA5H,EAAAqH,EAEA,IAAAI,OAAA7G,KAAAZ,EAAAkB,OAAAN,KAAAZ,EAAAsB,EAIA,MAAAa,GAAAnC,EAAAqH,EAGA,MAAA,IAAApH,OAAA,cAAAD,EAAA,QAAAqH,EAAA,iDAmBA,QAAAK,GAAA1H,EAAAqH,GAGA,MAAAC,GAKAtH,EAAA0C,GAAA1C,EAAA2C,KAAA,GAAA0E,EAAA3E,GAAA2E,EAAA1E,KAAA,EAIAgB,EAAA3D,EAAAqH,EAAAnI,GAGAkE,EAAApD,EAAAqH,EAAAhE,EAAAnE,GAXA8D,EAAAhD,EAAAqH,GAgBA,QAAAO,GAAA5H,EAAAqH,GAGA,MAAAC,GAGAlC,EAAApF,EAAAqH,EAAAhE,EAAAnE,GAFAmG,EAAArF,EAAAqH,EAAAnI,GAMA,QAAAyI,GAAA3H,EAAAqH,GAGA,MAAAC,GAGAjB,EAAArG,EAAAqH,EAAAhE,EAAAnE,GAFA2G,EAAA7F,EAAAqH,EAAAnI,GA7GA,GASAsG,GATArD,EAAA/C,KAAA+C,aAAA0F,KAAAzI,MACAiG,EAAAjG,KAAAiG,iBAAAwC,KAAAzI,MACA4D,EAAA5D,KAAA4D,cAAA6E,KAAAzI,MACAuE,EAAAvE,KAAAuE,sBAAAkE,KAAAzI,MACAgE,EAAAhE,KAAAgE,gBAAAyE,KAAAzI,MACAyG,EAAAzG,KAAAyG,uBAAAgC,KAAAzI,MACAgG,EAAAhG,KAAAgG,mBAAAyC,KAAAzI,MACAiH,EAAAjH,KAAAiH,yBAAAwB,KAAAzI,MAGAoI,MAAA5G,KAAAZ,EAAA4G,OACAa,MAAA7G,KAAAyG,EAAAT,MAiBA,OAdAY,IAAAH,YAAAS,QAAAL,GAAAzH,YAAA8H,OA8CA,WAEA,GAAA9H,YAAA8H,OAAA,CACA,GAAAC,GAAAV,CACAA,GAAArH,EACAA,EAAA+H,EAGA,IAAA,GAAAnI,GAAAyH,EAAAhH,OAAA,EAAAT,GAAA,EAAAA,IAAA,CACA,GAAAe,GAAA0G,EAAAzH,IACA4F,EAAA+B,EAAAvH,EAAAW,KACAgG,GAAAA,EAAAnB,EAAA7E,OAnDA6E,EAAA+B,EAAAvH,EAAAqH,GAQA7B,GA2GAjF,EAAAE,UAAAuH,QAAA,SAAAhD,EAAAE,GAQA,IAAA,GAPA+C,IACAzF,KAAA,EACAF,MAAA,EACAG,QAAA,EACAF,OAAA,GAGA3C,EAAAsF,EAAA7E,OAAA,EAAAT,GAAA,EAAAA,IAAA,CACA,GAAAsI,GAAAhD,EAAAtF,EAEAoF,GAAA9D,EAAAgH,EAAAhH,EAAAgH,EAAA1G,QACAyG,EAAA3F,MAAA,GAEA0C,EAAA9D,EAAA8D,EAAAxD,MAAA0G,EAAAhH,IACA+G,EAAA1F,OAAA,GAEAyC,EAAA1D,EAAA4G,EAAA5G,EAAA4G,EAAAxG,SACAuG,EAAAzF,KAAA,GAEAwC,EAAAtD,OAAAsD,EAAA1D,EAAA4G,EAAA5G,IACA2G,EAAAxF,QAAA,GAIA,MAAAwF,IAKA1H,EAAAE,UAAA0H,kBAAA,SAAAnD,EAAAE,EAAAkD,GACA,GAAAH,GAAA7I,KAAA4I,QAAAhD,EAAAE,EACA,KAAA,GAAAtF,KAAAqI,IACA,IAAAG,EAAAC,QAAAzI,KACAqI,EAAArI,IAAA,EAGA,OAAAqI,IAIA1H,EAAAE,UAAA6H,YAAA,SAAAtD,EAAAE,GACA,IAAA,GAAAtF,GAAAsF,EAAA7E,OAAA,EAAAT,GAAA,EAAAA,IAAA,CACA,GAAAsI,GAAAhD,EAAAtF,EACA,IACAoF,EAAAtD,OAAAsD,EAAA1D,EAAA4G,EAAA5G,GACA0D,EAAA1D,EAAA4G,EAAA5G,EAAA4G,EAAAxG,QACAsD,EAAA9D,EAAAgH,EAAAhH,EAAAgH,EAAA1G,MAEA,OAAA,IAMAjB,EAAAE,UAAA8H,aAAA,SAAAvD,EAAAE,GACA,IAAA,GAAAtF,GAAAsF,EAAA7E,OAAA,EAAAT,GAAA,EAAAA,IAAA,CACA,GAAAsI,GAAAhD,EAAAtF,EACA,IACAoF,EAAAtD,OAAAsD,EAAA1D,EAAA4G,EAAA5G,GACA0D,EAAA1D,EAAA4G,EAAA5G,EAAA4G,EAAAxG,QACAsD,EAAA9D,EAAA8D,EAAAxD,MAAA0G,EAAAhH,EAEA,OAAA,IAMAX,EAAAE,UAAA+H,WAAA,SAAAxD,EAAAE,GACA,IAAA,GAAAtF,GAAAsF,EAAA7E,OAAA,EAAAT,GAAA,EAAAA,IAAA,CACA,GAAAsI,GAAAhD,EAAAtF,EACA,IACAoF,EAAA9D,EAAA8D,EAAAxD,MAAA0G,EAAAhH,GACA8D,EAAA9D,EAAAgH,EAAAhH,EAAAgH,EAAA1G,OACAwD,EAAA1D,EAAA4G,EAAA5G,EAAA4G,EAAAxG,OAEA,OAAA,IAMAnB,EAAAE,UAAAgI,cAAA,SAAAzD,EAAAE,GACA,IAAA,GAAAtF,GAAAsF,EAAA7E,OAAA,EAAAT,GAAA,EAAAA,IAAA,CACA,GAAAsI,GAAAhD,EAAAtF,EACA,IACAoF,EAAA9D,EAAA8D,EAAAxD,MAAA0G,EAAAhH,GACA8D,EAAA9D,EAAAgH,EAAAhH,EAAAgH,EAAA1G,OACAwD,EAAAtD,OAAAsD,EAAA1D,EAAA4G,EAAA5G,EAEA,OAAA,IAKAzC,EAAAD,QAAA2B,0BCpiDA,GAAAA,IACAA,KAAAT,EAAA,UAKAgB,QAAA4H,OAAAC,KAAAC,OAAArI,GAEA1B,EAAAD,QAAA2B","file":"pixi-bump.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * Renderer that clamps the texture so neighbour frames wont bleed on it\n * immitates context2d drawImage behaviour\n *\n * @class\n * @memberof PIXI.extras\n * @extends PIXI.DisplayObject\n */\nfunction Bump() {\n  this.rendererType = \"pixi\";\n}\n\nBump.prototype = new Bump();\n\n//`addCollisionProperties` adds extra properties to sprites to help\n//simplify the collision code. It won't add these properties if they\n//already exist on the sprite. After these properties have been\n//added, this methods adds a Boolean property to the sprite called `_bumpPropertiesAdded`\n//and sets it to `true` to flag that the sprite has these\n//new properties\nBump.prototype.addCollisionProperties = function(sprite) {\n  //Add properties to Pixi sprites\n  if (this.rendererType === \"pixi\") {\n    //gx\n    if (sprite.gx === undefined) {\n      Object.defineProperty(sprite, \"gx\", {\n        get: function() {\n          return sprite.getGlobalPosition().x;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //gy\n    if (sprite.gy === undefined) {\n      Object.defineProperty(sprite, \"gy\", {\n        get: function() {\n          return sprite.getGlobalPosition().y;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //centerX\n    if (sprite.centerX === undefined) {\n      Object.defineProperty(sprite, \"centerX\", {\n        get: function() {\n          return sprite.x + sprite.width / 2;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //centerY\n    if (sprite.centerY === undefined) {\n      Object.defineProperty(sprite, \"centerY\", {\n        get: function() {\n          return sprite.y + sprite.height / 2;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //halfWidth\n    if (sprite.halfWidth === undefined) {\n      Object.defineProperty(sprite, \"halfWidth\", {\n        get: function() {\n          return sprite.width / 2;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //halfHeight\n    if (sprite.halfHeight === undefined) {\n      Object.defineProperty(sprite, \"halfHeight\", {\n        get: function() {\n          return sprite.height / 2;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //xAnchorOffset\n    if (sprite.xAnchorOffset === undefined) {\n      Object.defineProperty(sprite, \"xAnchorOffset\", {\n        get: function() {\n          if (sprite.anchor !== undefined) {\n            return sprite.width * sprite.anchor.x;\n          } else {\n            return 0;\n          }\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //yAnchorOffset\n    if (sprite.yAnchorOffset === undefined) {\n      Object.defineProperty(sprite, \"yAnchorOffset\", {\n        get: function() {\n          if (sprite.anchor !== undefined) {\n            return sprite.height * sprite.anchor.y;\n          } else {\n            return 0;\n          }\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    if (sprite.circular && sprite.radius === undefined) {\n      Object.defineProperty(sprite, \"radius\", {\n        get: function() {\n          return sprite.width / 2;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    //Earlier code - not needed now.\n    /*\n    Object.defineProperties(sprite, {\n      \"gx\": {\n        get: function(){return sprite.getGlobalPosition().x},\n        enumerable: true, configurable: true\n      },\n      \"gy\": {\n        get: function(){return sprite.getGlobalPosition().y},\n        enumerable: true, configurable: true\n      },\n      \"centerX\": {\n        get: function(){return sprite.x + sprite.width / 2},\n        enumerable: true, configurable: true\n      },\n      \"centerY\": {\n        get: function(){return sprite.y + sprite.height / 2},\n        enumerable: true, configurable: true\n      },\n      \"halfWidth\": {\n        get: function(){return sprite.width / 2},\n        enumerable: true, configurable: true\n      },\n      \"halfHeight\": {\n        get: function(){return sprite.height / 2},\n        enumerable: true, configurable: true\n      },\n      \"xAnchorOffset\": {\n        get: function(){\n          if (sprite.anchor !== undefined) {\n            return sprite.height * sprite.anchor.x;\n          } else {\n            return 0;\n          }\n        },\n        enumerable: true, configurable: true\n      },\n      \"yAnchorOffset\": {\n        get: function(){\n          if (sprite.anchor !== undefined) {\n            return sprite.width * sprite.anchor.y;\n          } else {\n            return 0;\n          }\n        },\n        enumerable: true, configurable: true\n      }\n    });\n    */\n  }\n\n  //Add a Boolean `_bumpPropertiesAdded` property to the sprite to flag it\n  //as having these new properties\n  sprite._bumpPropertiesAdded = true;\n};\n\n/*\nhitTestPoint\n------------\n\nUse it to find out if a point is touching a circlular or rectangular sprite.\nParameters: \na. An object with `x` and `y` properties.\nb. A sprite object with `x`, `y`, `centerX` and `centerY` properties.\nIf the sprite has a `radius` property, the function will interpret\nthe shape as a circle.\n*/\nBump.prototype.hitTestPoint = function(point, sprite) {\n  //Add collision properties\n  if (!sprite._bumpPropertiesAdded) this.addCollisionProperties(sprite);\n\n  var shape, left, right, top, bottom, vx, vy, magnitude, hit;\n\n  //Find out if the sprite is rectangular or circular depending\n  //on whether it has a `radius` property\n  if (sprite.radius) {\n    shape = \"circle\";\n  } else {\n    shape = \"rectangle\";\n  }\n\n  //Rectangle\n  if (shape === \"rectangle\") {\n    //Get the position of the sprite's edges\n    left = sprite.x - sprite.xAnchorOffset;\n    right = sprite.x + sprite.width - sprite.xAnchorOffset;\n    top = sprite.y - sprite.yAnchorOffset;\n    bottom = sprite.y + sprite.height - sprite.yAnchorOffset;\n\n    //Find out if the point is intersecting the rectangle\n    hit = point.x > left && point.x < right && point.y > top && point.y < bottom;\n  }\n\n  //Circle\n  if (shape === \"circle\") {\n    //Find the distance between the point and the\n    //center of the circle\n    vx = point.x - sprite.x - sprite.width / 2 + sprite.xAnchorOffset;\n    vy = point.y - sprite.y - sprite.height / 2 + sprite.yAnchorOffset;\n    magnitude = Math.sqrt(vx * vx + vy * vy);\n\n    //The point is intersecting the circle if the magnitude\n    //(distance) is less than the circle's radius\n    hit = magnitude < sprite.radius;\n  }\n\n  //`hit` will be either `true` or `false`\n  return hit;\n};\n\n/*\nhitTestCircle\n-------------\n\nUse it to find out if two circular sprites are touching.\nParameters: \na. A sprite object with `centerX`, `centerY` and `radius` properties.\nb. A sprite object with `centerX`, `centerY` and `radius`.\n*/\nBump.prototype.hitTestCircle = function(c1, c2, global) {\n  //Add collision properties\n  if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1);\n  if (!c2._bumpPropertiesAdded) this.addCollisionProperties(c2);\n\n  var vx, vy, magnitude, combinedRadii, hit;\n\n  //Calculate the vector between the circles’ center points\n  if (global) {\n    //Use global coordinates\n    vx = c2.gx + c2.width / 2 - c2.xAnchorOffset - (c1.gx + c1.width / 2 - c1.xAnchorOffset);\n    vy = c2.gy + c2.width / 2 - c2.yAnchorOffset - (c1.gy + c1.width / 2 - c1.yAnchorOffset);\n  } else {\n    //Use local coordinates\n    vx = c2.x + c2.width / 2 - c2.xAnchorOffset - (c1.x + c1.width / 2 - c1.xAnchorOffset);\n    vy = c2.y + c2.width / 2 - c2.yAnchorOffset - (c1.y + c1.width / 2 - c1.yAnchorOffset);\n  }\n\n  //Find the distance between the circles by calculating\n  //the vector's magnitude (how long the vector is)\n  magnitude = Math.sqrt(vx * vx + vy * vy);\n\n  //Add together the circles' total radii\n  combinedRadii = c1.radius + c2.radius;\n\n  //Set `hit` to `true` if the distance between the circles is\n  //less than their `combinedRadii`\n  hit = magnitude < combinedRadii;\n\n  //`hit` will be either `true` or `false`\n  return hit;\n};\n\n/*\ncircleCollision\n---------------\n\nUse it to prevent a moving circular sprite from overlapping and optionally\nbouncing off a non-moving circular sprite.\nParameters: \na. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\nb. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\nc. Optional: true or false to indicate whether or not the first sprite\nshould bounce off the second sprite.\nThe sprites can contain an optional mass property that should be greater than 1.\n\n*/\nBump.prototype.circleCollision = function(c1, c2, bounce, global) {\n  //Add collision properties\n  if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1);\n  if (!c2._bumpPropertiesAdded) this.addCollisionProperties(c2);\n\n  var magnitude,\n    combinedRadii,\n    overlap,\n    vx,\n    vy,\n    dx,\n    dy,\n    s = {},\n    hit = false;\n\n  //Calculate the vector between the circles’ center points\n\n  if (global) {\n    //Use global coordinates\n    vx = c2.gx + c2.width / 2 - c2.xAnchorOffset - (c1.gx + c1.width / 2 - c1.xAnchorOffset);\n    vy = c2.gy + c2.width / 2 - c2.yAnchorOffset - (c1.gy + c1.width / 2 - c1.yAnchorOffset);\n  } else {\n    //Use local coordinates\n    vx = c2.x + c2.width / 2 - c2.xAnchorOffset - (c1.x + c1.width / 2 - c1.xAnchorOffset);\n    vy = c2.y + c2.width / 2 - c2.yAnchorOffset - (c1.y + c1.width / 2 - c1.yAnchorOffset);\n  }\n\n  //Find the distance between the circles by calculating\n  //the vector's magnitude (how long the vector is)\n  magnitude = Math.sqrt(vx * vx + vy * vy);\n\n  //Add together the circles' combined half-widths\n  combinedRadii = c1.radius + c2.radius;\n\n  //Figure out if there's a collision\n  if (magnitude < combinedRadii) {\n    //Yes, a collision is happening\n    hit = true;\n\n    //Find the amount of overlap between the circles\n    overlap = combinedRadii - magnitude;\n\n    //Add some \"quantum padding\". This adds a tiny amount of space\n    //between the circles to reduce their surface tension and make\n    //them more slippery. \"0.3\" is a good place to start but you might\n    //need to modify this slightly depending on the exact behaviour\n    //you want. Too little and the balls will feel sticky, too much\n    //and they could start to jitter if they're jammed together\n    var quantumPadding = 0.3;\n    overlap += quantumPadding;\n\n    //Normalize the vector\n    //These numbers tell us the direction of the collision\n    dx = vx / magnitude;\n    dy = vy / magnitude;\n\n    //Move circle 1 out of the collision by multiplying\n    //the overlap with the normalized vector and subtract it from\n    //circle 1's position\n    c1.x -= overlap * dx;\n    c1.y -= overlap * dy;\n\n    //Bounce\n    if (bounce) {\n      //Create a collision vector object, `s` to represent the bounce \"surface\".\n      //Find the bounce surface's x and y properties\n      //(This represents the normal of the distance vector between the circles)\n      s.x = vy;\n      s.y = -vx;\n\n      //Bounce c1 off the surface\n      this.bounceOffSurface(c1, s);\n    }\n  }\n  return hit;\n};\n\n/*\nmovingCircleCollision\n---------------------\n\nUse it to make two moving circles bounce off each other.\nParameters: \na. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\nb. A sprite object with `x`, `y` `centerX`, `centerY` and `radius` properties.\nThe sprites can contain an optional mass property that should be greater than 1.\n\n*/\nBump.prototype.movingCircleCollision = function(c1, c2, global) {\n  //Add collision properties\n  if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1);\n  if (!c2._bumpPropertiesAdded) this.addCollisionProperties(c2);\n\n  var combinedRadii,\n    overlap,\n    xSide,\n    ySide,\n    //`s` refers to the distance vector between the circles\n    s = {},\n    p1A = {},\n    p1B = {},\n    p2A = {},\n    p2B = {},\n    hit = false;\n\n  //Apply mass, if the circles have mass properties\n  c1.mass = c1.mass || 1;\n  c2.mass = c2.mass || 1;\n\n  //Calculate the vector between the circles’ center points\n  if (global) {\n    //Use global coordinates\n    s.vx = c2.gx + c2.radius - c2.xAnchorOffset - (c1.gx + c1.radius - c1.xAnchorOffset);\n    s.vy = c2.gy + c2.radius - c2.yAnchorOffset - (c1.gy + c1.radius - c1.yAnchorOffset);\n  } else {\n    //Use local coordinates\n    s.vx = c2.x + c2.radius - c2.xAnchorOffset - (c1.x + c1.radius - c1.xAnchorOffset);\n    s.vy = c2.y + c2.radius - c2.yAnchorOffset - (c1.y + c1.radius - c1.yAnchorOffset);\n  }\n\n  //Find the distance between the circles by calculating\n  //the vector's magnitude (how long the vector is)\n  s.magnitude = Math.sqrt(s.vx * s.vx + s.vy * s.vy);\n\n  //Add together the circles' combined half-widths\n  combinedRadii = c1.radius + c2.radius;\n\n  //Figure out if there's a collision\n  if (s.magnitude < combinedRadii) {\n    //Yes, a collision is happening\n    hit = true;\n\n    //Find the amount of overlap between the circles\n    overlap = combinedRadii - s.magnitude;\n\n    //Add some \"quantum padding\" to the overlap\n    overlap += 0.3;\n\n    //Normalize the vector.\n    //These numbers tell us the direction of the collision\n    s.dx = s.vx / s.magnitude;\n    s.dy = s.vy / s.magnitude;\n\n    //Find the collision vector.\n    //Divide it in half to share between the circles, and make it absolute\n    s.vxHalf = Math.abs((s.dx * overlap) / 2);\n    s.vyHalf = Math.abs((s.dy * overlap) / 2);\n\n    //Find the side that the collision is occurring on\n    xSide = c1.x > c2.x ? 1 : -1;\n    ySide = c1.y > c2.y ? 1 : -1;\n\n    //Move c1 out of the collision by multiplying\n    //the overlap with the normalized vector and adding it to\n    //the circles' positions\n    c1.x = c1.x + s.vxHalf * xSide;\n    c1.y = c1.y + s.vyHalf * ySide;\n\n    //Move c2 out of the collision\n    c2.x = c2.x + s.vxHalf * -xSide;\n    c2.y = c2.y + s.vyHalf * -ySide;\n\n    //1. Calculate the collision surface's properties\n\n    //Find the surface vector's left normal\n    s.lx = s.vy;\n    s.ly = -s.vx;\n\n    //2. Bounce c1 off the surface (s)\n\n    //Find the dot product between c1 and the surface\n    var dp1 = c1.vx * s.dx + c1.vy * s.dy;\n\n    //Project c1's velocity onto the collision surface\n    p1A.x = dp1 * s.dx;\n    p1A.y = dp1 * s.dy;\n\n    //Find the dot product of c1 and the surface's left normal (s.lx and s.ly)\n    var dp2 = c1.vx * (s.lx / s.magnitude) + c1.vy * (s.ly / s.magnitude);\n\n    //Project the c1's velocity onto the surface's left normal\n    p1B.x = dp2 * (s.lx / s.magnitude);\n    p1B.y = dp2 * (s.ly / s.magnitude);\n\n    //3. Bounce c2 off the surface (s)\n\n    //Find the dot product between c2 and the surface\n    var dp3 = c2.vx * s.dx + c2.vy * s.dy;\n\n    //Project c2's velocity onto the collision surface\n    p2A.x = dp3 * s.dx;\n    p2A.y = dp3 * s.dy;\n\n    //Find the dot product of c2 and the surface's left normal (s.lx and s.ly)\n    var dp4 = c2.vx * (s.lx / s.magnitude) + c2.vy * (s.ly / s.magnitude);\n\n    //Project c2's velocity onto the surface's left normal\n    p2B.x = dp4 * (s.lx / s.magnitude);\n    p2B.y = dp4 * (s.ly / s.magnitude);\n\n    //4. Calculate the bounce vectors\n\n    //Bounce c1\n    //using p1B and p2A\n    c1.bounce = {};\n    c1.bounce.x = p1B.x + p2A.x;\n    c1.bounce.y = p1B.y + p2A.y;\n\n    //Bounce c2\n    //using p1A and p2B\n    c2.bounce = {};\n    c2.bounce.x = p1A.x + p2B.x;\n    c2.bounce.y = p1A.y + p2B.y;\n\n    //Add the bounce vector to the circles' velocity\n    //and add mass if the circle has a mass property\n    c1.vx = c1.bounce.x / c1.mass;\n    c1.vy = c1.bounce.y / c1.mass;\n    c2.vx = c2.bounce.x / c2.mass;\n    c2.vy = c2.bounce.y / c2.mass;\n  }\n  return hit;\n};\n\n/*\nmultipleCircleCollision\n-----------------------\n\nChecks all the circles in an array for a collision against\nall the other circles in an array, using `movingCircleCollision` (above)\n*/\nBump.prototype.multipleCircleCollision = function(arrayOfCircles, global) {\n  for (var i = 0; i < arrayOfCircles.length; i++) {\n    //The first circle to use in the collision check\n    var c1 = arrayOfCircles[i];\n    for (var j = i + 1; j < arrayOfCircles.length; j++) {\n      //The second circle to use in the collision check\n      var c2 = arrayOfCircles[j];\n\n      //Check for a collision and bounce the circles apart if\n      //they collide. Use an optional `mass` property on the sprite\n      //to affect the bounciness of each marble\n      this.movingCircleCollision(c1, c2, global);\n    }\n  }\n};\n\n/*\ncheckMultipleCollision\n-----------------------\n\n*/\nBump.prototype.checkMultipleCollision = function(displayObject, bounce, global) {\n  for (var i = 0; i < displayObject.length; i++) {\n    var rect1 = displayObjects[i];\n\n    for (var j = i + 1; j < displayObject.length; j++) {\n      var rect2 = displayObject[j];\n\n      if (!bounce) {\n        return hitTestRectangle(rect1, rect2, global);\n      } else {\n        return rectangleCollision(rect1, rect2, bounce, global);\n      }\n    }\n  }\n};\n\n/*\nrectangleCollision\n------------------\n\nUse it to prevent two rectangular sprites from overlapping.\nOptionally, make the first rectangle bounce off the second rectangle.\nParameters:\na. A sprite object with `x`, `y` `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\nb. A sprite object with `x`, `y` `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\nc. Optional: true or false to indicate whether or not the first sprite\nshould bounce off the second sprite.\n*/\nBump.prototype.rectangleCollision = function(r1, r2, bounce, global) {\n  if (global !== false) global = true;\n  //Add collision properties\n  if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1);\n  if (!r2._bumpPropertiesAdded) this.addCollisionProperties(r2);\n\n  var collision, combinedHalfWidths, combinedHalfHeights, overlapX, overlapY, vx, vy;\n\n  //Calculate the distance vector\n  if (global) {\n    vx = r1.gx + Math.abs(r1.halfWidth) - r1.xAnchorOffset - (r2.gx + Math.abs(r2.halfWidth) - r2.xAnchorOffset);\n    vy = r1.gy + Math.abs(r1.halfHeight) - r1.yAnchorOffset - (r2.gy + Math.abs(r2.halfHeight) - r2.yAnchorOffset);\n  } else {\n    //vx = r1.centerX - r2.centerX;\n    //vy = r1.centerY - r2.centerY;\n    vx = r1.x + Math.abs(r1.halfWidth) - r1.xAnchorOffset - (r2.x + Math.abs(r2.halfWidth) - r2.xAnchorOffset);\n    vy = r1.y + Math.abs(r1.halfHeight) - r1.yAnchorOffset - (r2.y + Math.abs(r2.halfHeight) - r2.yAnchorOffset);\n  }\n\n  //Figure out the combined half-widths and half-heights\n  combinedHalfWidths = Math.abs(r1.halfWidth) + Math.abs(r2.halfWidth);\n  combinedHalfHeights = Math.abs(r1.halfHeight) + Math.abs(r2.halfHeight);\n\n  //Check whether vx is less than the combined half widths\n  if (Math.abs(vx) < combinedHalfWidths) {\n    //A collision might be occurring!\n    //Check whether vy is less than the combined half heights\n    if (Math.abs(vy) < combinedHalfHeights) {\n      //A collision has occurred! This is good!\n      //Find out the size of the overlap on both the X and Y axes\n      overlapX = combinedHalfWidths - Math.abs(vx);\n      overlapY = combinedHalfHeights - Math.abs(vy);\n\n      //The collision has occurred on the axis with the\n      //*smallest* amount of overlap. var's figure out which\n      //axis that is\n\n      if (overlapX >= overlapY) {\n        //The collision is happening on the X axis\n        //But on which side? vy can tell us\n\n        if (vy > 0) {\n          collision = \"top\";\n          //Move the rectangle out of the collision\n          r1.y = r1.y + overlapY;\n        } else {\n          collision = \"bottom\";\n          //Move the rectangle out of the collision\n          r1.y = r1.y - overlapY;\n        }\n\n        //Bounce\n        if (bounce) {\n          r1.vy *= -1;\n\n          /*Alternative\n            //Find the bounce surface's vx and vy properties\n            var s = {};\n            s.vx = r2.x - r2.x + r2.width;\n            s.vy = 0;\n\n            //Bounce r1 off the surface\n            //this.bounceOffSurface(r1, s);\n            */\n        }\n      } else {\n        //The collision is happening on the Y axis\n        //But on which side? vx can tell us\n\n        if (vx > 0) {\n          collision = \"left\";\n          //Move the rectangle out of the collision\n          r1.x = r1.x + overlapX;\n        } else {\n          collision = \"right\";\n          //Move the rectangle out of the collision\n          r1.x = r1.x - overlapX;\n        }\n\n        //Bounce\n        if (bounce) {\n          r1.vx *= -1;\n\n          /*Alternative\n            //Find the bounce surface's vx and vy properties\n            var s = {};\n            s.vx = 0;\n            s.vy = r2.y - r2.y + r2.height;\n\n            //Bounce r1 off the surface\n            this.bounceOffSurface(r1, s);\n            */\n        }\n      }\n    } else {\n      //No collision\n    }\n  } else {\n    //No collision\n  }\n\n  //Return the collision string. it will be either \"top\", \"right\",\n  //\"bottom\", or \"left\" depending on which side of r1 is touching r2.\n  return collision;\n};\n\n/*\nhitTestRectangle\n----------------\n\nUse it to find out if two rectangular sprites are touching.\nParameters: \na. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\nb. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n\n*/\nBump.prototype.hitTestRectangle = function(r1, r2, global) {\n  //Add collision properties\n  if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1);\n  if (!r2._bumpPropertiesAdded) this.addCollisionProperties(r2);\n\n  var hit, combinedHalfWidths, combinedHalfHeights, vx, vy;\n\n  //A variable to determine whether there's a collision\n  hit = false;\n\n  //Calculate the distance vector\n  if (global) {\n    vx = r1.gx + Math.abs(r1.halfWidth) - r1.xAnchorOffset - (r2.gx + Math.abs(r2.halfWidth) - r2.xAnchorOffset);\n    vy = r1.gy + Math.abs(r1.halfHeight) - r1.yAnchorOffset - (r2.gy + Math.abs(r2.halfHeight) - r2.yAnchorOffset);\n  } else {\n    vx = r1.x + Math.abs(r1.halfWidth) - r1.xAnchorOffset - (r2.x + Math.abs(r2.halfWidth) - r2.xAnchorOffset);\n    vy = r1.y + Math.abs(r1.halfHeight) - r1.yAnchorOffset - (r2.y + Math.abs(r2.halfHeight) - r2.yAnchorOffset);\n  }\n\n  //Figure out the combined half-widths and half-heights\n  combinedHalfWidths = Math.abs(r1.halfWidth) + Math.abs(r2.halfWidth);\n  combinedHalfHeights = Math.abs(r1.halfHeight) + Math.abs(r2.halfHeight);\n\n  //Check for a collision on the x axis\n  if (Math.abs(vx) < combinedHalfWidths) {\n    //A collision might be occuring. Check for a collision on the y axis\n    if (Math.abs(vy) < combinedHalfHeights) {\n      //There's definitely a collision happening\n      hit = true;\n    } else {\n      //There's no collision on the y axis\n      hit = false;\n    }\n  } else {\n    //There's no collision on the x axis\n    hit = false;\n  }\n\n  //`hit` will be either `true` or `false`\n  return hit;\n};\n\n/*\nhitTestCircleRectangle\n----------------\n\nUse it to find out if a circular shape is touching a rectangular shape\nParameters: \na. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\nb. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n\n*/\nBump.prototype.hitTestCircleRectangle = function(c1, r1, global) {\n  //Add collision properties\n  if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1);\n  if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1);\n\n  var region, collision, c1x, c1y, r1x, r1y;\n\n  //Use either global or local coordinates\n  if (global) {\n    c1x = c1.gx;\n    c1y = c1.gy;\n    r1x = r1.gx;\n    r1y = r1.gy;\n  } else {\n    c1x = c1.x;\n    c1y = c1.y;\n    r1x = r1.x;\n    r1y = r1.y;\n  }\n\n  //Is the circle above the rectangle's top edge?\n  if (c1y - c1.yAnchorOffset < r1y - Math.abs(r1.halfHeight) - r1.yAnchorOffset) {\n    //If it is, we need to check whether it's in the\n    //top left, top center or top right\n    if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"topLeft\";\n    } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"topRight\";\n    } else {\n      region = \"topMiddle\";\n    }\n  } else if (c1y - c1.yAnchorOffset > r1y + Math.abs(r1.halfHeight) - r1.yAnchorOffset) {\n    //The circle isn't above the top edge, so it might be\n    //below the bottom edge\n    //If it is, we need to check whether it's in the bottom left,\n    //bottom center, or bottom right\n    if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"bottomLeft\";\n    } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"bottomRight\";\n    } else {\n      region = \"bottomMiddle\";\n    }\n  } else {\n    //The circle isn't above the top edge or below the bottom edge,\n    //so it must be on the left or right side\n    if (c1x - c1.xAnchorOffset < r1x - Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"leftMiddle\";\n    } else {\n      region = \"rightMiddle\";\n    }\n  }\n\n  //Is this the circle touching the flat sides\n  //of the rectangle?\n  if (region === \"topMiddle\" || region === \"bottomMiddle\" || region === \"leftMiddle\" || region === \"rightMiddle\") {\n    //Yes, it is, so do a standard rectangle vs. rectangle collision test\n    collision = this.hitTestRectangle(c1, r1, global);\n  } else {\n    //The circle is touching one of the corners, so do a\n    //circle vs. point collision test\n    var point = {};\n\n    switch (region) {\n      case \"topLeft\":\n        point.x = r1x - r1.xAnchorOffset;\n        point.y = r1y - r1.yAnchorOffset;\n        break;\n\n      case \"topRight\":\n        point.x = r1x + r1.width - r1.xAnchorOffset;\n        point.y = r1y - r1.yAnchorOffset;\n        break;\n\n      case \"bottomLeft\":\n        point.x = r1x - r1.xAnchorOffset;\n        point.y = r1y + r1.height - r1.yAnchorOffset;\n        break;\n\n      case \"bottomRight\":\n        point.x = r1x + r1.width - r1.xAnchorOffset;\n        point.y = r1y + r1.height - r1.yAnchorOffset;\n    }\n\n    //Check for a collision between the circle and the point\n    collision = this.hitTestCirclePoint(c1, point, global);\n  }\n\n  //Return the result of the collision.\n  //The return value will be `undefined` if there's no collision\n  if (collision) {\n    return region;\n  } else {\n    return collision;\n  }\n};\n\n/*\nhitTestCirclePoint\n------------------\n\nUse it to find out if a circular shape is touching a point\nParameters: \na. A sprite object with `centerX`, `centerY`, and `radius` properties.\nb. A point object with `x` and `y` properties.\n\n*/\nBump.prototype.hitTestCirclePoint = function(c1, point, global) {\n  //Add collision properties\n  if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1);\n\n  //A point is just a circle with a diameter of\n  //1 pixel, so we can cheat. All we need to do is an ordinary circle vs. circle\n  //Collision test. Just supply the point with the properties\n  //it needs\n  point.diameter = 1;\n  point.width = point.diameter;\n  point.radius = 0.5;\n  point.centerX = point.x;\n  point.centerY = point.y;\n  point.gx = point.x;\n  point.gy = point.y;\n  point.xAnchorOffset = 0;\n  point.yAnchorOffset = 0;\n  point._bumpPropertiesAdded = true;\n  return this.hitTestCircle(c1, point, global);\n};\n\n/*\n  circleRectangleCollision\n  ------------------------\n\n  Use it to bounce a circular shape off a rectangular shape\n  Parameters: \n  a. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n  b. A sprite object with `centerX`, `centerY`, `halfWidth` and `halfHeight` properties.\n\n  */\nBump.prototype.circleRectangleCollision = function(c1, r1, bounce, global) {\n  //Add collision properties\n  if (!r1._bumpPropertiesAdded) this.addCollisionProperties(r1);\n  if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1);\n\n  var region, collision, c1x, c1y, r1x, r1y;\n\n  //Use either the global or local coordinates\n  if (global) {\n    c1x = c1.gx;\n    c1y = c1.gy;\n    r1x = r1.gx;\n    r1y = r1.gy;\n  } else {\n    c1x = c1.x;\n    c1y = c1.y;\n    r1x = r1.x;\n    r1y = r1.y;\n  }\n\n  //Is the circle above the rectangle's top edge?\n  if (c1y - c1.yAnchorOffset < r1y - Math.abs(r1.halfHeight) - r1.yAnchorOffset) {\n    //If it is, we need to check whether it's in the\n    //top left, top center or top right\n    if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"topLeft\";\n    } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"topRight\";\n    } else {\n      region = \"topMiddle\";\n    }\n  } else if (c1y - c1.yAnchorOffset > r1y + Math.abs(r1.halfHeight) - r1.yAnchorOffset) {\n    //The circle isn't above the top edge, so it might be\n    //below the bottom edge\n    //If it is, we need to check whether it's in the bottom left,\n    //bottom center, or bottom right\n    if (c1x - c1.xAnchorOffset < r1x - 1 - Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"bottomLeft\";\n    } else if (c1x - c1.xAnchorOffset > r1x + 1 + Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"bottomRight\";\n    } else {\n      region = \"bottomMiddle\";\n    }\n  } else {\n    //The circle isn't above the top edge or below the bottom edge,\n    //so it must be on the left or right side\n    if (c1x - c1.xAnchorOffset < r1x - Math.abs(r1.halfWidth) - r1.xAnchorOffset) {\n      region = \"leftMiddle\";\n    } else {\n      region = \"rightMiddle\";\n    }\n  }\n\n  //Is this the circle touching the flat sides\n  //of the rectangle?\n  if (region === \"topMiddle\" || region === \"bottomMiddle\" || region === \"leftMiddle\" || region === \"rightMiddle\") {\n    //Yes, it is, so do a standard rectangle vs. rectangle collision test\n    collision = this.rectangleCollision(c1, r1, bounce, global);\n  } else {\n    //The circle is touching one of the corners, so do a\n    //circle vs. point collision test\n    var point = {};\n\n    switch (region) {\n      case \"topLeft\":\n        point.x = r1x - r1.xAnchorOffset;\n        point.y = r1y - r1.yAnchorOffset;\n        break;\n\n      case \"topRight\":\n        point.x = r1x + r1.width - r1.xAnchorOffset;\n        point.y = r1y - r1.yAnchorOffset;\n        break;\n\n      case \"bottomLeft\":\n        point.x = r1x - r1.xAnchorOffset;\n        point.y = r1y + r1.height - r1.yAnchorOffset;\n        break;\n\n      case \"bottomRight\":\n        point.x = r1x + r1.width - r1.xAnchorOffset;\n        point.y = r1y + r1.height - r1.yAnchorOffset;\n    }\n\n    //Check for a collision between the circle and the point\n    collision = this.circlePointCollision(c1, point, bounce, global);\n  }\n\n  if (collision) {\n    return region;\n  } else {\n    return collision;\n  }\n};\n\n/*\n  circlePointCollision\n  --------------------\n\n  Use it to boucnce a circle off a point.\n  Parameters: \n  a. A sprite object with `centerX`, `centerY`, and `radius` properties.\n  b. A point object with `x` and `y` properties.\n\n  */\n\nBump.prototype.circlePointCollision = function(c1, point, bounce, global) {\n  //Add collision properties\n  if (!c1._bumpPropertiesAdded) this.addCollisionProperties(c1);\n\n  //A point is just a circle with a diameter of\n  //1 pixel, so we can cheat. All we need to do is an ordinary circle vs. circle\n  //Collision test. Just supply the point with the properties\n  //it needs\n  point.diameter = 1;\n  point.width = point.diameter;\n  point.radius = 0.5;\n  point.centerX = point.x;\n  point.centerY = point.y;\n  point.gx = point.x;\n  point.gy = point.y;\n  point.xAnchorOffset = 0;\n  point.yAnchorOffset = 0;\n  point._bumpPropertiesAdded = true;\n  return this.circleCollision(c1, point, bounce, global);\n};\n\n/*\n  bounceOffSurface\n  ----------------\n\n  Use this to bounce an object off another object.\n  Parameters: \n  a. An object with `v.x` and `v.y` properties. This represents the object that is colliding\n  with a surface.\n  b. An object with `x` and `y` properties. This represents the surface that the object\n  is colliding into.\n  The first object can optionally have a mass property that's greater than 1. The mass will\n  be used to dampen the bounce effect.\n  */\n\nBump.prototype.bounceOffSurface = function(o, s) {\n  //Add collision properties\n  if (!o._bumpPropertiesAdded) this.addCollisionProperties(o);\n\n  var dp1,\n    dp2,\n    p1 = {},\n    p2 = {},\n    bounce = {},\n    mass = o.mass || 1;\n\n  //1. Calculate the collision surface's properties\n  //Find the surface vector's left normal\n  s.lx = s.y;\n  s.ly = -s.x;\n\n  //Find its magnitude\n  s.magnitude = Math.sqrt(s.x * s.x + s.y * s.y);\n\n  //Find its normalized values\n  s.dx = s.x / s.magnitude;\n  s.dy = s.y / s.magnitude;\n\n  //2. Bounce the object (o) off the surface (s)\n\n  //Find the dot product between the object and the surface\n  dp1 = o.vx * s.dx + o.vy * s.dy;\n\n  //Project the object's velocity onto the collision surface\n  p1.vx = dp1 * s.dx;\n  p1.vy = dp1 * s.dy;\n\n  //Find the dot product of the object and the surface's left normal (s.lx and s.ly)\n  dp2 = o.vx * (s.lx / s.magnitude) + o.vy * (s.ly / s.magnitude);\n\n  //Project the object's velocity onto the surface's left normal\n  p2.vx = dp2 * (s.lx / s.magnitude);\n  p2.vy = dp2 * (s.ly / s.magnitude);\n\n  //Reverse the projection on the surface's left normal\n  p2.vx *= -1;\n  p2.vy *= -1;\n\n  //Add up the projections to create a new bounce vector\n  bounce.x = p1.vx + p2.vx;\n  bounce.y = p1.vy + p2.vy;\n\n  //Assign the bounce vector to the object's velocity\n  //with optional mass to dampen the effect\n  o.vx = bounce.x / mass;\n  o.vy = bounce.y / mass;\n};\n\n/*\n  contain\n  -------\n  `contain` can be used to contain a sprite with `x` and\n  `y` properties inside a rectangular area.\n\n  The `contain` function takes four arguments: a sprite with `x` and `y`\n  properties, an object literal with `x`, `y`, `width` and `height` properties. The \n  third argument is a Boolean (true/false) value that determines if the sprite\n  should bounce when it hits the edge of the container. The fourth argument\n  is an extra user-defined callback function that you can call when the\n  sprite hits the container\n  ```js\n  contain(anySprite, {x: 0, y: 0, width: 512, height: 512}, true, callbackFunction);\n  ```\n  The code above will contain the sprite's position inside the 512 by\n  512 pixel area defined by the object. If the sprite hits the edges of\n  the container, it will bounce. The `callBackFunction` will run if \n  there's a collision.\n\n  An additional feature of the `contain` method is that if the sprite\n  has a `mass` property, it will be used to dampen the sprite's bounce\n  in a natural looking way.\n\n  If the sprite bumps into any of the containing object's boundaries,\n  the `contain` function will return a value that tells you which side\n  the sprite bumped into: “left”, “top”, “right” or “bottom”. Here's how\n  you could keep the sprite contained and also find out which boundary\n  it hit:\n  ```js\n  //Contain the sprite and find the collision value\n  var collision = contain(anySprite, {x: 0, y: 0, width: 512, height: 512});\n\n  //If there's a collision, display the boundary that the collision happened on\n  if(collision) {\n    if collision.has(\"left\") console.log(\"The sprite hit the left\");  \n    if collision.has(\"top\") console.log(\"The sprite hit the top\");  \n    if collision.has(\"right\") console.log(\"The sprite hit the right\");  \n    if collision.has(\"bottom\") console.log(\"The sprite hit the bottom\");  \n  }\n  ```\n  If the sprite doesn't hit a boundary, the value of\n  `collision` will be `undefined`. \n  */\n\n/*\n  contain(sprite, container, bounce, extra = undefined) {\n\n    //Helper methods that compensate for any possible shift the the\n    //sprites' anchor points\n    var nudgeAnchor = (o, value, axis) => {\n      if (o.anchor !== undefined) {\n        if (o.anchor[axis] !== 0) {\n          return value * ((1 - o.anchor[axis]) - o.anchor[axis]);\n        } else {\n          return value;\n        }\n      } else {\n        return value; \n      }\n    };\n\n    var compensateForAnchor = (o, value, axis) => {\n      if (o.anchor !== undefined) {\n        if (o.anchor[axis] !== 0) {\n          return value * o.anchor[axis];\n        } else {\n          return 0;\n        }\n      } else {\n        return 0; \n      }\n    };\n\n    var compensateForAnchors = (a, b, property1, property2) => {\n        return compensateForAnchor(a, a[property1], property2) + compensateForAnchor(b, b[property1], property2)\n    };    \n    //Create a set called `collision` to keep track of the\n    //boundaries with which the sprite is colliding\n    var collision = new Set();\n\n    //Left\n    if (sprite.x - compensateForAnchor(sprite, sprite.width, \"x\") < container.x - sprite.parent.gx - compensateForAnchor(container, container.width, \"x\")) {\n      //Bounce the sprite if `bounce` is true\n      if (bounce) sprite.vx *= -1;\n\n      //If the sprite has `mass`, var the mass\n      //affect the sprite's velocity\n      if(sprite.mass) sprite.vx /= sprite.mass;\n\n      //Keep the sprite inside the container\n      sprite.x = container.x - sprite.parent.gx + compensateForAnchor(sprite, sprite.width, \"x\") - compensateForAnchor(container, container.width, \"x\");\n\n      //Add \"left\" to the collision set\n      collision.add(\"left\");\n    }\n\n    //Top\n    if (sprite.y - compensateForAnchor(sprite, sprite.height, \"y\") < container.y - sprite.parent.gy - compensateForAnchor(container, container.height, \"y\")) {\n      if (bounce) sprite.vy *= -1;\n      if(sprite.mass) sprite.vy /= sprite.mass;\n      sprite.y = container.x - sprite.parent.gy + compensateForAnchor(sprite, sprite.height, \"y\") - compensateForAnchor(container, container.height, \"y\");\n      collision.add(\"top\");\n    }\n\n    //Right\n    if (sprite.x - compensateForAnchor(sprite, sprite.width, \"x\") + sprite.width > container.width - compensateForAnchor(container, container.width, \"x\")) {\n      if (bounce) sprite.vx *= -1;\n      if(sprite.mass) sprite.vx /= sprite.mass;\n      sprite.x = container.width - sprite.width + compensateForAnchor(sprite, sprite.width, \"x\") - compensateForAnchor(container, container.width, \"x\");\n      collision.add(\"right\");\n    }\n\n    //Bottom\n    if (sprite.y - compensateForAnchor(sprite, sprite.height, \"y\") + sprite.height > container.height - compensateForAnchor(container, container.height, \"y\")) {\n      if (bounce) sprite.vy *= -1;\n      if(sprite.mass) sprite.vy /= sprite.mass;\n      sprite.y = container.height - sprite.height + compensateForAnchor(sprite, sprite.height, \"y\") - compensateForAnchor(container, container.height, \"y\");\n      collision.add(\"bottom\");\n    }\n\n    //If there were no collisions, set `collision` to `undefined`\n    if (collision.size === 0) collision = undefined;\n\n    //The `extra` function runs if there was a collision\n    //and `extra` has been defined\n    if (collision && extra) extra(collision);\n\n    //Return the `collision` value\n    return collision;\n  }\n  */\nBump.prototype.contain = function(sprite, container, bounce, extra) {\n  if (!extra) extra = undefined;\n  //Add collision properties\n  if (!sprite._bumpPropertiesAdded) this.addCollisionProperties(sprite);\n\n  //Give the container x and y anchor offset values, if it doesn't\n  //have any\n  if (container.xAnchorOffset === undefined) container.xAnchorOffset = 0;\n  if (container.yAnchorOffset === undefined) container.yAnchorOffset = 0;\n  if (sprite.parent.gx === undefined) sprite.parent.gx = 0;\n  if (sprite.parent.gy === undefined) sprite.parent.gy = 0;\n\n  //Create a Set called `collision` to keep track of the\n  //boundaries with which the sprite is colliding\n  var collision = new Set();\n\n  //Left\n  if (sprite.x - sprite.xAnchorOffset < container.x - sprite.parent.gx - container.xAnchorOffset) {\n    //Bounce the sprite if `bounce` is true\n    if (bounce) sprite.vx *= -1;\n\n    //If the sprite has `mass`, var the mass\n    //affect the sprite's velocity\n    if (sprite.mass) sprite.vx /= sprite.mass;\n\n    //Reposition the sprite inside the container\n    sprite.x = container.x - sprite.parent.gx - container.xAnchorOffset + sprite.xAnchorOffset;\n\n    //Make a record of the side which the container hit\n    collision.add(\"left\");\n  }\n\n  //Top\n  if (sprite.y - sprite.yAnchorOffset < container.y - sprite.parent.gy - container.yAnchorOffset) {\n    if (bounce) sprite.vy *= -1;\n    if (sprite.mass) sprite.vy /= sprite.mass;\n    sprite.y = container.y - sprite.parent.gy - container.yAnchorOffset + sprite.yAnchorOffset;\n    collision.add(\"top\");\n  }\n\n  //Right\n  if (sprite.x - sprite.xAnchorOffset + sprite.width > container.width - container.xAnchorOffset) {\n    if (bounce) sprite.vx *= -1;\n    if (sprite.mass) sprite.vx /= sprite.mass;\n    sprite.x = container.width - sprite.width - container.xAnchorOffset + sprite.xAnchorOffset;\n    collision.add(\"right\");\n  }\n\n  //Bottom\n  if (sprite.y - sprite.yAnchorOffset + sprite.height > container.height - container.yAnchorOffset) {\n    if (bounce) sprite.vy *= -1;\n    if (sprite.mass) sprite.vy /= sprite.mass;\n    sprite.y = container.height - sprite.height - container.yAnchorOffset + sprite.yAnchorOffset;\n    collision.add(\"bottom\");\n  }\n\n  //If there were no collisions, set `collision` to `undefined`\n  if (collision.size === 0) collision = undefined;\n\n  //The `extra` function runs if there was a collision\n  //and `extra` has been defined\n  if (collision && extra) extra(collision);\n\n  //Return the `collision` value\n  return collision;\n};\n\n//`outsideBounds` checks whether a sprite is outide the boundary of\n//another object. It returns an object called `collision`. `collision` will be `undefined` if there's no\n//collision. But if there is a collision, `collision` will be\n//returned as a Set containg strings that tell you which boundary\n//side was crossed: \"left\", \"right\", \"top\" or \"bottom\"\nBump.prototype.outsideBounds = function(s, bounds, extra) {\n  var x = bounds.x,\n    y = bounds.y,\n    width = bounds.width,\n    height = bounds.height;\n\n  //The `collision` object is used to store which\n  //side of the containing rectangle the sprite hits\n  var collision = new Set();\n\n  //Left\n  if (s.x < x - s.width) {\n    collision.add(\"left\");\n  }\n  //Top\n  if (s.y < y - s.height) {\n    collision.add(\"top\");\n  }\n  //Right\n  if (s.x > width + s.width) {\n    collision.add(\"right\");\n  }\n  //Bottom\n  if (s.y > height + s.height) {\n    collision.add(\"bottom\");\n  }\n\n  //If there were no collisions, set `collision` to `undefined`\n  if (collision.size === 0) collision = undefined;\n\n  //The `extra` function runs if there was a collision\n  //and `extra` has been defined\n  if (collision && extra) extra(collision);\n\n  //Return the `collision` object\n  return collision;\n};\n\n/*\n  _getCenter\n  ----------\n\n  A utility that finds the center point of the sprite. If it's anchor point is the\n  sprite's top left corner, then the center is calculated from that point.\n  If the anchor point has been shifted, then the anchor x/y point is used as the sprite's center\n  */\n\nBump.prototype._getCenter = function(o, dimension, axis) {\n  if (o.anchor !== undefined) {\n    if (o.anchor[axis] !== 0) {\n      return 0;\n    } else {\n      //console.log(o.anchor[axis])\n      return dimension / 2;\n    }\n  } else {\n    return dimension;\n  }\n};\n\nBump.prototype.hit = function(a, b, react, bounce, global, extra) {\n  //Local references to bump's collision methods\n  var hitTestPoint = this.hitTestPoint.bind(this),\n    hitTestRectangle = this.hitTestRectangle.bind(this),\n    hitTestCircle = this.hitTestCircle.bind(this),\n    movingCircleCollision = this.movingCircleCollision.bind(this),\n    circleCollision = this.circleCollision.bind(this),\n    hitTestCircleRectangle = this.hitTestCircleRectangle.bind(this),\n    rectangleCollision = this.rectangleCollision.bind(this),\n    circleRectangleCollision = this.circleRectangleCollision.bind(this);\n\n  var collision,\n    aIsASprite = a.parent !== undefined,\n    bIsASprite = b.parent !== undefined;\n\n  //Check to make sure one of the arguments isn't an array\n  if ((aIsASprite && b instanceof Array) || (bIsASprite && a instanceof Array)) {\n    //If it is, check for a collision between a sprite and an array\n    spriteVsArray();\n  } else {\n    //If one of the arguments isn't an array, find out what type of\n    //collision check to run\n    collision = findCollisionType(a, b);\n  }\n\n  //Return the result of the collision.\n  //It will be `undefined` if there's no collision and `true` if\n  //there is a collision. `rectangleCollision` sets `collsision` to\n  //\"top\", \"bottom\", \"left\" or \"right\" depeneding on which side the\n  //collision is occuring on\n  return collision;\n\n  function findCollisionType(a, b) {\n    //Are `a` and `b` both sprites?\n    //(We have to check again if this function was called from\n    //`spriteVsArray`)\n    var aIsASprite = a.parent !== undefined;\n    var bIsASprite = b.parent !== undefined;\n\n    if (aIsASprite && bIsASprite) {\n      //Yes, but what kind of sprites?\n      if (a.diameter && b.diameter) {\n        //They're circles\n        return circleVsCircle(a, b);\n      } else if (a.diameter && !b.diameter) {\n        //The first one is a circle and the second is a rectangle\n        return circleVsRectangle(a, b);\n      } else {\n        //They're rectangles\n        return rectangleVsRectangle(a, b);\n      }\n    } else if (bIsASprite && a.x !== undefined && a.y !== undefined) {\n      //They're not both sprites, so what are they?\n      //Is `a` not a sprite and does it have x and y properties?\n      //Yes, so this is a point vs. sprite collision test\n      return hitTestPoint(a, b);\n    } else {\n      //The user is trying to test some incompatible objects\n      throw new Error(\"I'm sorry, \" + a + \" and \" + b + \" cannot be use together in a collision test.'\");\n    }\n  }\n\n  function spriteVsArray() {\n    //If `a` happens to be the array, flip it around so that it becomes `b`\n    if (a instanceof Array) {\n      var tmpb = b;\n      b = a;\n      a = tmpb;\n    }\n    //Loop through the array in reverse\n    for (var i = b.length - 1; i >= 0; i--) {\n      var sprite = b[i];\n      collision = findCollisionType(a, sprite);\n      if (collision && extra) extra(collision, sprite);\n    }\n  }\n\n  function circleVsCircle(a, b) {\n    //If the circles shouldn't react to the collision,\n    //just test to see if they're touching\n    if (!react) {\n      return hitTestCircle(a, b);\n    } else {\n      //Yes, the circles should react to the collision\n      //Are they both moving?\n      if (a.vx + a.vy !== 0 && b.vx + b.vy !== 0) {\n        //Yes, they are both moving\n        //(moving circle collisions always bounce apart so there's\n        //no need for the third, `bounce`, argument)\n        return movingCircleCollision(a, b, global);\n      } else {\n        //No, they're not both moving\n        return circleCollision(a, b, bounce, global);\n      }\n    }\n  }\n\n  function rectangleVsRectangle(a, b) {\n    //If the rectangles shouldn't react to the collision, just\n    //test to see if they're touching\n    if (!react) {\n      return hitTestRectangle(a, b, global);\n    } else {\n      return rectangleCollision(a, b, bounce, global);\n    }\n  }\n\n  function circleVsRectangle(a, b) {\n    //If the rectangles shouldn't react to the collision, just\n    //test to see if they're touching\n    if (!react) {\n      return hitTestCircleRectangle(a, b, global);\n    } else {\n      return circleRectangleCollision(a, b, bounce, global);\n    }\n  }\n};\n\n/*\nhitTest\n-----------------------\n// Test each directions and return true for each if hitTest is verified\n\n// var rect1 = displayObject.getGlobalPosition();\n// rect1.width = displayObject.width;\n// rect1.height = displayObject.height;\n// var rect2 = displayObject2.getGlobalPosition();\n// rect2.width = displayObject2.width;\n// rect2.height = displayObject2.height;\n\n// if (rect1.x < rect2.x + rect2.width &&\n//   rect1.x + rect1.width > rect2.x &&\n//   rect1.y < rect2.y + rect2.height &&\n//   rect1.height + rect1.y > rect2.y) {\n//   return true;\n// }\n*/\nBump.prototype.hitTest = function(displayObject, displayObjects) {\n  var hitDirections = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  };\n\n  for (var i = displayObjects.length - 1; i >= 0; i--) {\n    var displayObject2 = displayObjects[i];\n\n    if (displayObject.x < displayObject2.x + displayObject2.width) {\n      hitDirections.left = true;\n    }\n    if (displayObject.x + displayObject.width > displayObject2.x) {\n      hitDirections.right = true;\n    }\n    if (displayObject.y < displayObject2.y + displayObject2.height) {\n      hitDirections.top = true;\n    }\n    if (displayObject.height + displayObject.y > displayObject2.y) {\n      hitDirections.bottom = true;\n    }\n  }\n\n  return hitDirections;\n};\n\n// Only hitTest defines directions of the object\n// for ex, directions = ['top', 'bottom'];\nBump.prototype.hitTestDirections = function(displayObject, displayObjects, directions) {\n  var hitDirections = this.hitTest(displayObject, displayObjects);\n  for (var i in hitDirections) {\n    if (directions.indexOf(i) === -1) {\n      hitDirections[i] = false;\n    }\n  }\n  return hitDirections;\n};\n\n// Only hitTest left side of the object\nBump.prototype.hitTestLeft = function(displayObject, displayObjects) {\n  for (var i = displayObjects.length - 1; i >= 0; i--) {\n    var displayObject2 = displayObjects[i];\n    if (\n      displayObject.height + displayObject.y > displayObject2.y &&\n      displayObject.y < displayObject2.y + displayObject2.height &&\n      displayObject.x < displayObject2.x + displayObject2.width\n    ) {\n      return true;\n    }\n  }\n};\n\n// Only hitTest right side of the object\nBump.prototype.hitTestRight = function(displayObject, displayObjects) {\n  for (var i = displayObjects.length - 1; i >= 0; i--) {\n    var displayObject2 = displayObjects[i];\n    if (\n      displayObject.height + displayObject.y > displayObject2.y &&\n      displayObject.y < displayObject2.y + displayObject2.height &&\n      displayObject.x + displayObject.width > displayObject2.x\n    ) {\n      return true;\n    }\n  }\n};\n\n// Only hitTest top side of the object\nBump.prototype.hitTestTop = function(displayObject, displayObjects) {\n  for (var i = displayObjects.length - 1; i >= 0; i--) {\n    var displayObject2 = displayObjects[i];\n    if (\n      displayObject.x + displayObject.width > displayObject2.x &&\n      displayObject.x < displayObject2.x + displayObject2.width &&\n      displayObject.y < displayObject2.y + displayObject2.height\n    ) {\n      return true;\n    }\n  }\n};\n\n// Only hitTest bottom side of the object\nBump.prototype.hitTestBottom = function(displayObject, displayObjects) {\n  for (var i = displayObjects.length - 1; i >= 0; i--) {\n    var displayObject2 = displayObjects[i];\n    if (\n      displayObject.x + displayObject.width > displayObject2.x &&\n      displayObject.x < displayObject2.x + displayObject2.width &&\n      displayObject.height + displayObject.y > displayObject2.y\n    ) {\n      return true;\n    }\n  }\n};\n\nmodule.exports = Bump;\n","var Bump = {\n  Bump: require(\"./Bump\"),\n};\n\n//dump everything into extras\n\nObject.assign(PIXI.extras, Bump);\n\nmodule.exports = Bump;\n"],"sourceRoot":"."}